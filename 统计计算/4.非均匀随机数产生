#逆变换法生成离散型随机数#
rng.discrete.uni<- function(n=1,m=2){
  ceiling(m*runif(n))
}#其中n是要生成的个数，m是离散分布的取值个数#
rng.discrete.uni(60,m=6)
#另外我们在R中可以用sample.int(m,size=n,replace=TRUE),从m个总体中有放回抽样地抽取n个#
sample.int(6,size=60,replace=TRUE)
#算法一，逆变换法取一般有限离散分布#
rng.discrete.v1<- function(x,n=1,prob=rep(1/length(x),length(x))){
  m<- length(x)
  y<- numeric(n)
  Fvs<- c(0,cumsum(prob[-m]))
  for(i in 1:n){
  j<- max(which(Fvs<= runif(1)))
  y[i]<- x[j]
  }
  y
}
x<- rng.discrete.v1(1:3,n=1000,prob=c(0.1,0.3,0.6))
prop.table(table(x))*100
#利用sample函数进行抽样#
x<- sample(1:3,size=1000,replace=TRUE,prob=c(0.1,0.3,0.6))
prop.table(table(x))
#无放回抽样的实现#
##构造一个1：n的随机随机序列##
rpermu<- function(n){
  x<- 1:n
  for(k in n:2){
  U<- runif(1)
  I<- ceiling(k*U)
  tmp<- x[k];x[k]<- x[I];X[I]<- tmp
  }
  
  x
}
rpermu(10)
##另上面的程序循环r次，即可得无放回抽样的样本r个##
rpermu<- function(n,size=n){
  x<- 1:n
  for(k in n:(n-size+2)){
    U<- runif(1)
    I<- ceiling(k*U)
    tmp<- x[k];x[k]<- x[I];x[I]<- tmp
  }
  
  
  x[(n-size+1):n]  
}
rpermu(10,size=5)
#sample.int可以是实现随机排列，也可以实现无放回抽样#
sample.int(10)
sample.int(10,size=5)
#逆变换法求几何分布的随机数#
##n为需要输出的个数，p表示成功概率##
rng.geom<- function(n=1,p=0.5){
  ceiling(log(runif(n)))/log(1-p)
}
x<- rng.geom(1000,p=0.1)
mean(x)
#利用几何分布生成独立试验序列#
rbernoulli.geom<- function(sze=1,prob=0.6){
  x<- numeric(size)
  k<- 0
  while(k<= size){
    T<- rgeom(1,prob=prob)
    if(T>1){
      x[(k+1):(min(c(k+T-1,size)))]<-0
    }
    if(k+T<=size) x[k+T]<- 1
    k<- k+T
  }
  
  
  X
}
x<- rbernoulli.geom(size=1000,prob=0.1)
prop.table(table(x))*100
#逆变换法生成二项分布随机数#
##n为输出的个数，非二项分布参数##
##size为二项分布参数当中的试验次数##
rbinom.v1<- function(n,size=,prob=0.5){
  x<- numeric(n)
  for(i in 1:n){
  U<- runif(1)
  k<- 0
  cc<- prob/(1-prob)
  a<- (1-prob)^size
  F<- a
  while(U>F){
    a<- a*cc*(size-k)/(k+1)
    F<- F+a
    k<- k+1
  }
  x[i]<- k
  }
  
  
  x
}
x<- rbinom.v1(n=10000,size=10,prob=0.3)
round(prop.table(table(x))*100)
#利用逆变换法求泊松分布的随机数#
##n表示需要输出的个数，非参数，lambda表示泊松分布的速率参数##
rpois.v1<- function(n,lambda=1){
  x<- numeric(n)
  for(i in 1:n){
  U<- runif(1)
  p<- exp(-lambda)
  F<- p
  k<- 0
  while(U>F){
    p<- p*lambda/（k+1)
    F<- F+P
    K<- K+1
  }
  X[i]<- k
  }
  
  
  x
}
x<- rpois.v1(n=1000,lambda=3)
round(prop.table(table(x))*100)
round(dpois(0:10,lambda=3)*100)
#逆变换法求三角形分布#
##标准右三角形的随机数##
rng.rtri<- function(n){
  sqrt(runif(n))
}
x<- rng.rtri(1000)
hist(x,freq=FALSE)
curve(2*x,0,1,col="red",add=TRUE)
##标准左三角形分布的随机数##
rng.ltri<- function(n){
  1-sqrt(runif(n))
}
x<- rng.ltri(1000)
hist(x,freq=FALSE)
curve(2*(1-x),0,1,col="red",add=TRUE)
##标准三角形分布的随机数##
rng.tri<- function(n,m){
  u<- runif(n)
  ifelse(u<=m,sqrt(m*u),1-sqrt((1-m)*(1-u)))
}
m<- 0.3
x<- rng.tri(1000,m)
hist(x,freq=FALSE,ylim=c(0,2))
curve(ifelse(x<m,2/m*x,2/(1-m)*(1-x)),0,1,col="red",add=TRUE)
##逆变换法求指数分布的随机数####R已经提供了rexp函数##
rng.exp<- function(n,rate=1){
  -log(runif(n))/rate
}
x<- rng.exp(1000,2)
hist(x,freq=FALSE)
curve(2*exp(-2*x),0,10,col="red",add=TRUE)
##利用指数分布随机产生泊松随机数##
rng.possion.byexp<- function(n,rate=1){
  x<- numeric(n)
  a<- exp(-rate)
  for(i in 1:n){
    p<- 1
    k<- 0
    repeat{
      k<- k+1
      p<- p*runif(1)
      if(p<a) break
    }
    x[i]<- k-1
  }
  
  x
}
x<- rng.possion.byexp(1000,rate=2)
round(prop.table(table(x))*100)
rbind(0:10,round(dpois(0:10,lambda=2)*100))
#用Box-Muller变换生成正态随机数#
rng.normbm<- function(n,mu,sigma){
  n2<- ceiling(n/2);nn<- 2*n2
  amp<- sqrt(-2*log(runif(n2)))
  ang<- 2*pi*runif(n2)
  mu+sigma*c(amp*cos(ang),amp*sin(ang))[1:n]
}
x<- rng.normbm(1001,10,2)
str(x)
hist(x,freq=FALSE)
curve(dnorm(x,10,2),4,16,col="red",add=TRUE)
#舍选法#
##算法描述##
###舍选法1###
####until(Y<=p(x)){
          从U(0,1)中抽取U1,U2
          取X=a+(b-a)*U1,Y=M*U2
}
输出Z=X####
###舍选法2###
####until(Y<=P(X)/(cg(X)){
        从g（x）中抽取X
        从U（0，1）中抽取Y
}
输出Z=X####
##利用舍选法1生成Beta（2，4）的随机数##
rng.beta24<- function(n){
  xvec<- numeric(n)
  for(i in 1:n){
    repeat{
      U1<- runif(1)
      U2<- runif(1)
      x<- U1
      Y<- 135/64*U2
      if(Y<= 20*x*(1-x)^3) break
    }
    xvec[i]<- x
  }
  
  xvec
}
x<- rng.beta24(1000)
hist(x,freq=FALSE,ylim=c(0,2.5))
curve(dbeta(x,2,4),0,1,col="red",add=TRUE)
###针对上述问题R已经提供了rbeta函数###
##用舍选法2生成Gamma（3/2，1）随机数##
rng.gamma321<- function(n){
  xvec<- numeric(n)
  a<- sqrt(2*exp(1)/3)
  for(i in seq(along=xvec)){
    repeat{
      X<- -1.5*log(runif(1))
      Y<- runif(1)
      if(Y<=a*sqrt(X)*exp(-1/3*X))break
    }
    xvec[i]<-X
  }
  xvec
}
x<- rng.gamma321(1000)
hist(x,freq=FALSE,ylim=c(0,0.7))
curve(dgamma(x,shape=1.5,rate=1),0,10,col="red",add=TRUE)
#复合法#
##复合法求离散型随机分布##
rng.dismix2218<- function(n){
  xvec<- numeric(n)
  for(i in seq(along=xvec)){
    U1<- runif(1)
    U2<- runif(1)
    if(U1<- 0.75){
      xvec[i]<- ceiling(5*U2)+5
    }else{
      xvec[i]<- ceiling(5*U2)
    }
  }
  
  xvec
}
x<- rng.dismix2218(10000)
round(prop.table(table(x))*100)
##复合法求梯形分布随机数##
rng.ladd<- function(n=1,a=0.5){
  xvec<- numeric(n)
  for(i in seq(along=xvec)){
    U1<- runif(1)
    if(U1<a){
      xvec[i]<- runif(1)
    }else{
      xvec[i]<- sqrt(runif(1))
    }
    }
    
    xvec
  }
a<- 0.3
x<- rng.ladd(10000,a=a)
hist(x,freq=FALSE)
curve(a+2*(1-a)*x,0,1,col="red",add=TRUE)
